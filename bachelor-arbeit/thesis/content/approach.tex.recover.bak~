\section{Approach}

In this section the general approach is described.
To estimate the test cost, three different approaches are implemented: The Halstead metric, cyclomatic complexity and a custom solution that considers the testing method and the properties of the underlying simulation software. For each approach, the calculation was done on a function group basis and using function IDs.

\subsection{Halstead-Metric} \label{sec:approach-halstead}

Halstead defines multiple metrics to estimate the complexity of software \cite{Halstead:1977}. For this use-case the most important one is the difficulty, which is defined as \( D = \tfrac{n_1}{2} \times \tfrac{N_2}{n_2} \). The volume \( V = N \times \log_2 n \) will additionally be evaluated in \autoref{sec:eval}. All Halstead metrics are based on four parameters:

\begin{itemize}
	\item \( n_1 =  \) amount of distinct operators
	\item \( N_1 =  \) total number of operators
	\item \( n_2 =  \) amount of distinct operands
	\item \( N_2 =  \) total number of operands
\end{itemize}

Function blocks are interpreted as operators, the inputs of a function group as operands. For the function group in \autoref{fig:example_halstead} this results in \( n_1 = 2\), \( N_1 = 3\), \( n_2 = 6\) and \( N_2 = 6\). Note that 'LFRDYA' does not count as operand because it is build inside this function group. Using these parameters the software vocabulary \( n = n_1 + n_2\) and the length \( N = N_1 + N_2 \) can be calculated. 

\begin{figure}[ht]
	\centering
	\includegraphics[width=0.7\textwidth]{graphic/example_halstead.png}
	\caption{Function Group example}
	\label{fig:example_halstead}
\end{figure}



\subsection{Cyclomatic-Complexity} \label{sec:approach-}

Cyclomatic complexity is a graph-theoretic complexity measure introduced by McCabe \cite{McCabe:1976}. He defines the cyclomatic number \(v(G) = e - n + 2p\) of a graph G, where n is the number of vertices, e the amount of edges and p the number of connected components. When looking for connected components only the specific function ID or function group is considered. This decision was made for two reasons. First, the algorithm to find all connected components takes quite a long time when considering the whole program, secondly the result will mostly always be p = 1. For the function group in \autoref{fig:example_halstead} the result would be \(v(G) = 11 - 3 + 2*1 = 10\). \(p = 1\), since the function blocks 'LFRDY\_1' and 'LFRDY\_2' are connected via the signal 'LFRDYA' to 'LFRDY\_0'.

\subsection{Custom Approach: Signal Depth Analysis}

When testing the software, it is currently only possible to manipulate global signals (global variables) of a function package, as local signals are overwritten each cycle in the simulation. Hence, the longer the path from the signal that shall be validated to its global signals is, the more complex it is to understand which values produce a specific result. F.e when considering the function group in \autoref{fig:example_halstead}, the outgoing signals are 'LFRDYA', 'LFRDYG1' and 'LFRDYG1'. For each of these signals Algorithm \ref{alg:signalDepth} is executed, that takes the first function block (fb) before the signal as parameter and counts the visited function blocks along the path until a global signal is reached. The resulting difficulty for that function group is defined as: \( D = \log_2(S_a * g * G)\), where \( S_a = \) the average signal depth of all outgoing signals, \(g = \) number of unique global signals and \(G = \) the number of all global signals needed. All three parameters are equally weighted in this function because it is not obvious which parameter has the biggest impact on complexity. The logarithmic function is applied to the product to prevent linear scaling. This is inspired by St√ºrmer et. al, which concluded similar for the amount of inputs and function blocks \cite{Stuermer:2010}.


\begin{algorithm}[H]
	\caption{Recursive signal depth algorithm}\label{alg:signalDepth}
	\begin{algorithmic}[1]
		\Procedure{calculateSignalDepth}{$fb$}
		\State $signalDepth\gets 1$
		\State $fb.visited\gets True$
		
		\For{\texttt{signal in fb.InSignals}} \Comment{InSignals is empty}
			\If{\texttt{signal.isGlobal()}}
				\State $globalSignals\gets signal$\Comment{Add to list of all global signals}
				\State \Return signalDepth
			\EndIf
			\State $beforeFb = signal.getSource()$
			\If{\texttt{NOT beforeFb.visited}}\Comment{cycle prevention}
				\State $signalDepth \gets signalDepth + calculateSignalDepth(beforeFb)$
			\Else
				\State $signalDepth \gets signalDepth + 1$\Comment{Stop recursion on cycle}
			\EndIf
		\EndFor
		\State \Return $signalDepth$
		\EndProcedure
	\end{algorithmic}
\end{algorithm}

\subsection{Implementation: sbtSWAT}

The tool which implements this approach is called sbtSWAT. An acronym for Siemens brake testing software analysis tool. It consists of six python2 modules: sbtSwat\_main.py, halstead.py, cyclomaticComplexity.py, signalDepth.py, functionIdTracer.py and dataHandler.py. To start programs using the SAMAPI a batch file that setups the Jython Environment and loads the API has to be called. In this batch file the python script needs to be specified with a path to a program or function package as command line argument. In order to ease the execution of sbtSwat a minimalistic user interface was developed in Python3.7 (see \autoref{fig:sbtSwat_GUI}). Here, Python3 was used to allow easier integration in the currently employed toolchain.

\begin{figure}[H]
	\centering
	\includegraphics[width=1\textwidth]{graphic/sbtSwat_gui.png}
	\caption{sbtSwat User Interface}
	\label{fig:sbtSwat_GUI}
\end{figure}

It allows the user to select one or multiple paths and then modifies and calls the batch file according to user inputs, giving feedback to the user depending on the exit status of the batch process. On quit, all settings are saved in a serialized python file created by the pickle\footnote{\url{https://docs.python.org/3/library/pickle.html}} module. When a program is loaded, sbtSwat\_main gathers all function packages included and proceeds with the same procedure as when a function package was specified.

\begin{figure}[H]
	\centering
	\includegraphics[width=0.7\textwidth]{graphic/functionID.png}
	\caption{Function ID of Function Group KONSTLF0.010}
	\label{fig:functionID}
\end{figure}

Before finding parameters for the listed approaches above, all functionIDs with their respective function groups are traced. The result is a key-value pair (<fID>,<[fg]>). Each module representing an approach specifies a 'calculate' method that takes a list of function groups as parameter and then return the calculated result. This allows to use the same function call for the function ID and the function group approach.